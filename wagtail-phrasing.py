LONGEST_KEY = 1

starters = {	"BDA":"他",
				"BDIU":"她",
				"BDE":"它",
				"BDIW":"牠",
				"BDN":"祂",
				"UE":"我",
				"BDEN":"他們",
				"GZW":"是"}
				
enders = 	{	"IEW":"有",
				"D":"的",
				"ZW":"知道",
				"GDZAN":"看",
				"GZW":"是"}
				
number =	{	"I":"一",
				"GBEW":"某"}

classifier ={	"Z":"隻",
				"G":"個"}

preadj = 	{	"DZN":"很",
				"DZAW":"好",
				"BDAE":"太",
				"GBDZENW":"非常",
				"BZAW":"超",
				"ZIUEW":"最",
				"BIUA":"比較",
				"GEW":"夠",
				"IUAE":"越來越"}
				
adj = 		{"BUE":"薄",
"BAE":"白",
"BAW":"飽",
"BN":"笨",
"BANW":"棒",
"BIAN":"扁",
"BINW":"冰",
"B":"不",
"BDZA":"怕",
"BDZUE":"破",
"BDZE":"配",
"BDZANW":"胖",
"BDZNW":"澎",
"BDZIAW":"漂",
"BDZINW":"平",
"BDZ":"普",
"GBENW":"美",
"GBAW":"毛",
"GBAN":"慢",
"GBN":"悶",
"GBANW":"忙",
"GBNW":"猛",
"GBI":"密",
"GBIAW":"妙",
"GBIEW":"謬",
"GBDZUE":"佛",
"GBDZE":"肥",
"GBDZAN":"煩",
"GBDZN":"粉",
"GBDZANW":"方",
"GBDZNW":"瘋",
"GBDZ":"富",
"DA":"大",
"D":"的",
"DAE":"呆",
"DE":"得",
"DEW":"陡",
"DAN":"淡",
"DI":"低",
"DIAW":"屌",
"DU":"毒",
"DUE":"多",
"DUEW":"對",
"DUAN":"短",	
"DUN":"鈍",
"DUNW":"懂",
"BDAE":"臺",
"BDANW":"燙",
"BDNW":"疼",
"BDIAN":"甜",
"BDU":"土",
"BDUE":"妥",
"BDUAN":"團",
"BDUN":"囤",
"BDUNW":"痛",
"GBD":"呢",
"GBDAE":"耐",
"GBDE":"內",
"GBDAW":"鬧",
"GBDEW":"耨",
"GBDAN":"難",
"GBDN":"嫩",
"GBDANW":"囊",
"GBDNW":"能",
"GBDI":"膩",
"GBDIE":"捏",
"GBDIAW":"鳥",
"GBDIEW":"牛",
"GBDIAN":"黏",
"GBDIN":"您",
"GBDIANW":"娘",
"GBDINW":"寧",
"GBDU":"怒",
"GBDUE":"諾",
"GBDUAN":"暖",
"GBDUN":"黁",
"GBDUNW":"濃",
"GBDIU":"女",
"GBDIUE":"虐",
"GDA":"辣",
"GDUW":"囉",
"GD":"了",
"GDAE":"賴",
"GDE":"累",
"GDAW":"老",
"GDEW":"露",
"GDAN":"爛",
"GDANW":"浪",
"GDNW":"冷",
"GDI":"利",
"GDIE":"烈",
"GDIAW":"瞭",
"GDIEW":"溜",
"GDIANW":"亮",
"GDINW":"靈",
"GDU":"盧",
"GDUAN":"亂",
"GDUN":"論",
"GDUNW":"龍",
"GDIU":"綠",
"GDIUE":"略",
"GDIUAN":"臠",
"GA":"尬",
"GAE":"改",
"GE":"給",
"GAW":"高",
"GEW":"夠",
"GAN":"乾",
"GN":"根",
"GANW":"剛",
"GNW":"梗",
"GU":"鼓",
"GUE":"過",
"GUAE":"乖",
"GUEW":"貴",
"GUN":"滾",
"GUANW":"廣",
"GUNW":"攻",
"GDZA":"卡",
"GDZ":"渴",
"GDZAE":"開",
"GDZE":"剋",
"GDZAW":"靠",
"GDZEW":"摳",
"GDZAN":"看",
"GDZN":"肯",
"GDZANW":"康",
"GDZNW":"坑",
"GDZU":"苦",
"GDZUA":"誇",
"GDZUE":"闊",
"GDZUAE":"快",
"GDZUEW":"虧",
"GDZUAN":"寬",
"GDZUN":"睏",
"GDZUANW":"狂",
"GDZUNW":"空",
"DZA":"哈",
"DZ":"合",
"DZAE":"嗨",
"DZE":"黑",
"DZAW":"好",
"DZEW":"厚",
"DZAN":"寒",
"DZN":"狠",
"DZANW":"夯",
"DZNW":"橫",
"DZU":"糊",
"DZUA":"花",
"DZUE":"火",
"DZUAE":"壞",
"DZUEW":"會",
"DZUAN":"歡",
"DZUN":"混",
"DZUANW":"黃",
"DZUNW":"紅",
"GI":"急",
"GIA":"假",
"GIE":"解",
"GIAW":"嬌",
"GIEW":"久",
"GIAN":"賤",
"GIN":"近",
"GIANW":"僵",
"GINW":"靜",
"GIU":"巨",
"GIUE":"絕",
"GIUAN":"捲",
"GIUN":"俊",
"GIUNW":"囧",
"GDZI":"氣",
"GDZIA":"恰",
"GDZIE":"切",
"GDZIAW":"巧",
"GDZIEW":"求",
"GDZIAN":"淺",
"GDZIN":"親",
"GDZIANW":"強",
"GDZINW":"輕",
"GDZIU":"曲",
"GDZIUE":"缺",
"GDZIUAN":"全",
"GDZIUN":"群",
"GDZIUNW":"窮",
"DZI":"細",
"DZIA":"狹",
"DZIE":"斜",
"DZIAW":"小",
"DZIEW":"羞",
"DZIAN":"鹹",
"DZIN":"新",
"DZIANW":"香",
"DZINW":"行",
"DZIU":"虛",
"DZIUAN":"玄",
"DZIUN":"遜",
"DZIUNW":"兇",
"Z":"直",
"ZA":"渣",
"ZE":"折",
"ZAE":"窄",
"ZAW":"罩",
"ZEW":"皺",
"ZN":"真",
"ZANW":"脹",
"ZNW":"正",
"ZUE":"拙",
"ZUAE":"拽",
"ZUEW":"追",
"ZUAN":"賺",
"ZUN":"準",
"ZUANW":"壯",
"ZUNW":"重",
"BZ":"遲",
"BZA":"差",
"BZE":"扯",
"BZAW":"吵",
"BZEW":"臭",
"BZN":"沉",
"BZANW":"常",
"BZNW":"撐",
"BZU":"出",
"BZUE":"戳",
"BZUAE":"踹",
"BZUEW":"垂",
"BZUAN":"喘",
"BZUN":"純",
"BZUNW":"衝",
"GZ":"溼",
"GZW":"是",
"GZA":"傻",
"GZAW":"少",
"GZEW":"瘦",
"GZN":"深",
"GZUAE":"帥",
"GZUN":"順",
"GZUANW":"爽",
"GBZE":"熱",
"GBZEW":"柔",
"GBZUE":"弱",
"GBZUAN":"軟",
"GBZUNW":"容",
"ZI":"自",
"ZIA":"雜",
"ZIE":"澤",
"ZIAE":"仔",
"ZIENW":"賊",
"ZIAW":"早",
"ZIEW":"走",
"ZIAN":"讚",
"ZIN":"怎",
"ZIANW":"髒",
"ZINW":"增",
"ZIU":"足",
"ZIUE":"左",
"ZIUEW":"醉",
"ZIUAN":"鑽",
"ZIUN":"尊",
"ZIUNW":"總",
"BZIE":"側",
"BZIAE":"菜",
"BZIAW":"糙",
"BZIEW":"湊",
"BZIAN":"慘",
"BZIN":"岑",
"BZINW":"蹭",
"BZIU":"粗",
"BZIUE":"錯",
"BZIUEW":"脆",
"BZIUAN":"竄",
"BZIUNW":"從",
"GZIA":"颯",
"GZIE":"色",
"GZIAE":"塞",
"GZIAW":"騷",
"GZIEW":"廋",
"GZIAN":"散",
"GZIN":"森",
"GZIANW":"喪",
"GZINW":"僧",
"GZIU":"俗",
"GZIUE":"鎖",
"GZIUEW":"衰",
"GZIUAN":"酸",
"GZIUN":"損",
"GZIUNW":"鬆",
"A":"啊",
"UW":"喔",
"E":"餓",
"AE":"矮",
"ENW":"欸",
"AW":"凹",
"EW":"嘔",
"AN":"暗",
"N":"嗯",
"ANW":"骯",
"EN":"二",
"I":"易",
"IA":"呀",
"IW":"喲",
"IE":"野",
"IAE":"崖",
"IAW":"要",
"IEW":"有",
"IAN":"嚴",
"IN":"陰",
"IANW":"癢",
"INW":"硬",
"U":"霧",
"UA":"哇",
"UE":"我",
"UAE":"歪",
"UEW":"威",
"UAN":"晚",
"UN":"穩",
"UANW":"旺",
"UNW":"翁",
"IU":"慾",
"IUE":"約",
"IUAN":"遠",
"IUEN":"暈",
"IUNW":"勇"}

ordinal = 	{	"DI":"第"}

name = 		{ "GDI*GB":"李"}


def lookup(key):
	assert len(key) <= LONGEST_KEY
	
	ks = ""
	km = ""
	ke = ""
	ph = ""
	c = 0
	nm = 0
	for i in key[0]:				# for each key in the chorded input
		if c == 0:
			if i in "#": nm+=1 		# check if chord is a number phrase
			else: c+=1 				# move on otherwise
		if c == 1:
			if i in "-*": c+=1		# move on if you hit "-" or "*"
			else: ks += i			# otherwise add the key to the starting half
		if c == 2:
			if not i in "-*": c+=1	# if you find something that isn't "-" or "*", move on
			elif i in "-*": km += i	# vacuously add "-*" to middle keys
		if c == 3:
			ke += i					# add remaining keys to ending 


	if nm == 1:							# if chord has # for number
		if not ks in number: 			# can't find start in number
			if ks == "": ph += ""		# if empty, add nothing 
			else: raise KeyError
		if ks in number: ph += number[ks]	# if can find start in number, add to phrase
		if not ke in classifier: 		# can't find end in classifier
			if ke == "": ph += ""		# empty end
			else: raise KeyError
		if ke in classifier: ph += classifier[ke] # if can find end in classifier, add

	if ks in preadj:					# if chord has preadj starter
		if ks in preadj: ph += preadj[ks]	# if can find start in preadj, add to phrase
		if not ke in adj: 				# can't find end in adj
			if ke in enders: ph += enders[ke]	#if can find end in enders, add to phrase
			if ke == "": ph += ""		# empty end
			else: raise KeyError
		if ke in adj: ph += adj[ke] 	# if can find end in adj, add
		
	else:
		if not ks in starters:					# if left side not in starters
			if ks in number: ph += number[ks]	# check in numbers; add if found
			if ks == "": ph += ""				# if empty, add nothing
			else: raise KeyError
		if ks in starters: ph += starters[ks] 	# add left side if found in starters
		if not ke in enders:					# if right side not in enders
			if ke in classifier: ph += classifier[ke] # check classifiers; add if found
			if ke == "": ph += ""					# if empty, add nothing
			else: raise KeyError				
		if ke in enders: ph += enders[ke]		# if found right side in enders, add
	
	return " ".join(ph.split())
